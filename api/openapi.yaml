openapi: 3.0.4
info:
  title: gochain API
  version: '1.0.0'
servers:
  - url: http://127.0.0.1:9090
paths:
  /v1/health:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                required: [status, timestamp]
  /v1/chains:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainsResponse'
  /v1/keys/new:
    post:
      parameters:
        - in: query
          name: chain
          schema:
            type: string
            enum: [gochain, ethereum, bitcoin]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                seed:
                  type: string
                  description: Raw UTF-8 text; hashed server-side.
                passphrase:
                  type: string
                  description: Deterministic input; used only if mode=deterministic and seed is absent.
                mode:
                  type: string
                  enum: [random, deterministic]
                  default: random
      responses:
        '200':
          description: Created keypair
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/balance/{address}:
    get:
      parameters:
        - in: path
          name: address
          required: true
          schema: { type: string }
        - in: query
          name: chain
          schema:
            type: string
            enum: [gochain, ethereum, bitcoin]
      responses:
        '200':
          description: Balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tx/build:
    post:
      parameters:
        - in: query
          name: chain
          schema:
            type: string
            enum: [gochain, ethereum, bitcoin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildTxRequest'
      responses:
        '200':
          description: Built transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tx'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tx/sign:
    post:
      parameters:
        - in: query
          name: chain
          schema:
            type: string
            enum: [gochain, ethereum, bitcoin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignTxRequest'
      responses:
        '200':
          description: Signed transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedTx'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tx/broadcast:
    post:
      parameters:
        - in: query
          name: chain
          schema:
            type: string
            enum: [gochain, ethereum, bitcoin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedTx'
      responses:
        '200':
          description: Broadcast result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tx/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: chain
          schema:
            type: string
            enum: [gochain, ethereum, bitcoin]
      responses:
        '200':
          description: Tx status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ChainsResponse:
      type: array
      items: { type: string }
    KeyResponse:
      type: object
      properties:
        privateKey: { type: string }
        publicKey: { type: string }
        address: { type: string }
      required: [privateKey, publicKey, address]
    BalanceResponse:
      type: object
      properties:
        balance: { type: integer, format: uint64, minimum: 0 }
      required: [balance]
    BuildTxRequest:
      type: object
      properties:
        from: { type: string }
        to: { type: string }
        amount: { type: integer, format: uint64, minimum: 1 }
        fee:
          type: object
          properties:
            maxFeePerGas: { type: integer, format: uint64, minimum: 0 }
            maxPriorityFee: { type: integer, format: uint64, minimum: 0 }
          required: [maxFeePerGas]
      required: [from, to, amount, fee]
    Tx:
      type: object
      properties:
        from: { type: string }
        to: { type: string }
        amount: { type: integer, format: uint64 }
        fee: { type: integer, format: uint64 }
        nonce: { type: integer, format: uint64 }
        data: { type: string, nullable: true }
      required: [from, to, amount]
    SignTxRequest:
      type: object
      properties:
        privateKey: { type: string }
        tx: { $ref: '#/components/schemas/Tx' }
      required: [privateKey, tx]
    SignedTx:
      type: object
      properties:
        rawHex: { type: string }
        txId: { type: string }
      required: [rawHex, txId]
    BroadcastResponse:
      type: object
      properties:
        txId: { type: string }
      required: [txId]
    StatusResponse:
      type: object
      properties:
        status:
          type: string
          enum: [pending, mined]
      required: [status]
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
      required: [error]
