// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for StatusResponseStatus.
const (
	Mined   StatusResponseStatus = "mined"
	Pending StatusResponseStatus = "pending"
)

// Defines values for GetV1BalanceAddressParamsChain.
const (
	GetV1BalanceAddressParamsChainBitcoin  GetV1BalanceAddressParamsChain = "bitcoin"
	GetV1BalanceAddressParamsChainEthereum GetV1BalanceAddressParamsChain = "ethereum"
	GetV1BalanceAddressParamsChainGochain  GetV1BalanceAddressParamsChain = "gochain"
)

// Defines values for PostV1KeysNewParamsChain.
const (
	PostV1KeysNewParamsChainBitcoin  PostV1KeysNewParamsChain = "bitcoin"
	PostV1KeysNewParamsChainEthereum PostV1KeysNewParamsChain = "ethereum"
	PostV1KeysNewParamsChainGochain  PostV1KeysNewParamsChain = "gochain"
)

// Defines values for PostV1KeysNewJSONBodyMode.
const (
	Deterministic PostV1KeysNewJSONBodyMode = "deterministic"
	Random        PostV1KeysNewJSONBodyMode = "random"
)

// Defines values for PostV1TxBroadcastParamsChain.
const (
	PostV1TxBroadcastParamsChainBitcoin  PostV1TxBroadcastParamsChain = "bitcoin"
	PostV1TxBroadcastParamsChainEthereum PostV1TxBroadcastParamsChain = "ethereum"
	PostV1TxBroadcastParamsChainGochain  PostV1TxBroadcastParamsChain = "gochain"
)

// Defines values for PostV1TxBuildParamsChain.
const (
	PostV1TxBuildParamsChainBitcoin  PostV1TxBuildParamsChain = "bitcoin"
	PostV1TxBuildParamsChainEthereum PostV1TxBuildParamsChain = "ethereum"
	PostV1TxBuildParamsChainGochain  PostV1TxBuildParamsChain = "gochain"
)

// Defines values for PostV1TxSignParamsChain.
const (
	PostV1TxSignParamsChainBitcoin  PostV1TxSignParamsChain = "bitcoin"
	PostV1TxSignParamsChainEthereum PostV1TxSignParamsChain = "ethereum"
	PostV1TxSignParamsChainGochain  PostV1TxSignParamsChain = "gochain"
)

// Defines values for GetV1TxIdParamsChain.
const (
	GetV1TxIdParamsChainBitcoin  GetV1TxIdParamsChain = "bitcoin"
	GetV1TxIdParamsChainEthereum GetV1TxIdParamsChain = "ethereum"
	GetV1TxIdParamsChainGochain  GetV1TxIdParamsChain = "gochain"
)

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse struct {
	Balance uint64 `json:"balance"`
}

// BroadcastResponse defines model for BroadcastResponse.
type BroadcastResponse struct {
	TxId string `json:"txId"`
}

// BuildTxRequest defines model for BuildTxRequest.
type BuildTxRequest struct {
	Amount uint64 `json:"amount"`
	Fee    struct {
		MaxFeePerGas   uint64  `json:"maxFeePerGas"`
		MaxPriorityFee *uint64 `json:"maxPriorityFee,omitempty"`
	} `json:"fee"`
	From string `json:"from"`
	To   string `json:"to"`
}

// ChainsResponse defines model for ChainsResponse.
type ChainsResponse = []string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// KeyResponse defines model for KeyResponse.
type KeyResponse struct {
	Address    string `json:"address"`
	PrivateKey string `json:"privateKey"`
	PublicKey  string `json:"publicKey"`
}

// SignTxRequest defines model for SignTxRequest.
type SignTxRequest struct {
	PrivateKey string `json:"privateKey"`
	Tx         Tx     `json:"tx"`
}

// SignedTx defines model for SignedTx.
type SignedTx struct {
	RawHex string `json:"rawHex"`
	TxId   string `json:"txId"`
}

// StatusResponse defines model for StatusResponse.
type StatusResponse struct {
	Status StatusResponseStatus `json:"status"`
}

// StatusResponseStatus defines model for StatusResponse.Status.
type StatusResponseStatus string

// Tx defines model for Tx.
type Tx struct {
	Amount uint64  `json:"amount"`
	Data   *string `json:"data"`
	Fee    *uint64 `json:"fee,omitempty"`
	From   string  `json:"from"`
	Nonce  *uint64 `json:"nonce,omitempty"`
	To     string  `json:"to"`
}

// GetV1BalanceAddressParams defines parameters for GetV1BalanceAddress.
type GetV1BalanceAddressParams struct {
	Chain *GetV1BalanceAddressParamsChain `form:"chain,omitempty" json:"chain,omitempty"`
}

// GetV1BalanceAddressParamsChain defines parameters for GetV1BalanceAddress.
type GetV1BalanceAddressParamsChain string

// PostV1KeysNewJSONBody defines parameters for PostV1KeysNew.
type PostV1KeysNewJSONBody struct {
	Mode *PostV1KeysNewJSONBodyMode `json:"mode,omitempty"`

	// Passphrase Deterministic input; used only if mode=deterministic and seed is absent.
	Passphrase *string `json:"passphrase,omitempty"`

	// Seed Raw UTF-8 text; hashed server-side.
	Seed *string `json:"seed,omitempty"`
}

// PostV1KeysNewParams defines parameters for PostV1KeysNew.
type PostV1KeysNewParams struct {
	Chain *PostV1KeysNewParamsChain `form:"chain,omitempty" json:"chain,omitempty"`
}

// PostV1KeysNewParamsChain defines parameters for PostV1KeysNew.
type PostV1KeysNewParamsChain string

// PostV1KeysNewJSONBodyMode defines parameters for PostV1KeysNew.
type PostV1KeysNewJSONBodyMode string

// PostV1TxBroadcastParams defines parameters for PostV1TxBroadcast.
type PostV1TxBroadcastParams struct {
	Chain *PostV1TxBroadcastParamsChain `form:"chain,omitempty" json:"chain,omitempty"`
}

// PostV1TxBroadcastParamsChain defines parameters for PostV1TxBroadcast.
type PostV1TxBroadcastParamsChain string

// PostV1TxBuildParams defines parameters for PostV1TxBuild.
type PostV1TxBuildParams struct {
	Chain *PostV1TxBuildParamsChain `form:"chain,omitempty" json:"chain,omitempty"`
}

// PostV1TxBuildParamsChain defines parameters for PostV1TxBuild.
type PostV1TxBuildParamsChain string

// PostV1TxSignParams defines parameters for PostV1TxSign.
type PostV1TxSignParams struct {
	Chain *PostV1TxSignParamsChain `form:"chain,omitempty" json:"chain,omitempty"`
}

// PostV1TxSignParamsChain defines parameters for PostV1TxSign.
type PostV1TxSignParamsChain string

// GetV1TxIdParams defines parameters for GetV1TxId.
type GetV1TxIdParams struct {
	Chain *GetV1TxIdParamsChain `form:"chain,omitempty" json:"chain,omitempty"`
}

// GetV1TxIdParamsChain defines parameters for GetV1TxId.
type GetV1TxIdParamsChain string

// PostV1KeysNewJSONRequestBody defines body for PostV1KeysNew for application/json ContentType.
type PostV1KeysNewJSONRequestBody PostV1KeysNewJSONBody

// PostV1TxBroadcastJSONRequestBody defines body for PostV1TxBroadcast for application/json ContentType.
type PostV1TxBroadcastJSONRequestBody = SignedTx

// PostV1TxBuildJSONRequestBody defines body for PostV1TxBuild for application/json ContentType.
type PostV1TxBuildJSONRequestBody = BuildTxRequest

// PostV1TxSignJSONRequestBody defines body for PostV1TxSign for application/json ContentType.
type PostV1TxSignJSONRequestBody = SignTxRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/balance/{address})
	GetV1BalanceAddress(w http.ResponseWriter, r *http.Request, address string, params GetV1BalanceAddressParams)

	// (GET /v1/chains)
	GetV1Chains(w http.ResponseWriter, r *http.Request)

	// (GET /v1/health)
	GetV1Health(w http.ResponseWriter, r *http.Request)

	// (POST /v1/keys/new)
	PostV1KeysNew(w http.ResponseWriter, r *http.Request, params PostV1KeysNewParams)

	// (POST /v1/tx/broadcast)
	PostV1TxBroadcast(w http.ResponseWriter, r *http.Request, params PostV1TxBroadcastParams)

	// (POST /v1/tx/build)
	PostV1TxBuild(w http.ResponseWriter, r *http.Request, params PostV1TxBuildParams)

	// (POST /v1/tx/sign)
	PostV1TxSign(w http.ResponseWriter, r *http.Request, params PostV1TxSignParams)

	// (GET /v1/tx/{id})
	GetV1TxId(w http.ResponseWriter, r *http.Request, id string, params GetV1TxIdParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /v1/balance/{address})
func (_ Unimplemented) GetV1BalanceAddress(w http.ResponseWriter, r *http.Request, address string, params GetV1BalanceAddressParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v1/chains)
func (_ Unimplemented) GetV1Chains(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v1/health)
func (_ Unimplemented) GetV1Health(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v1/keys/new)
func (_ Unimplemented) PostV1KeysNew(w http.ResponseWriter, r *http.Request, params PostV1KeysNewParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v1/tx/broadcast)
func (_ Unimplemented) PostV1TxBroadcast(w http.ResponseWriter, r *http.Request, params PostV1TxBroadcastParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v1/tx/build)
func (_ Unimplemented) PostV1TxBuild(w http.ResponseWriter, r *http.Request, params PostV1TxBuildParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v1/tx/sign)
func (_ Unimplemented) PostV1TxSign(w http.ResponseWriter, r *http.Request, params PostV1TxSignParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v1/tx/{id})
func (_ Unimplemented) GetV1TxId(w http.ResponseWriter, r *http.Request, id string, params GetV1TxIdParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetV1BalanceAddress operation middleware
func (siw *ServerInterfaceWrapper) GetV1BalanceAddress(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", chi.URLParam(r, "address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1BalanceAddressParams

	// ------------- Optional query parameter "chain" -------------

	err = runtime.BindQueryParameter("form", true, false, "chain", r.URL.Query(), &params.Chain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chain", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1BalanceAddress(w, r, address, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV1Chains operation middleware
func (siw *ServerInterfaceWrapper) GetV1Chains(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Chains(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV1Health operation middleware
func (siw *ServerInterfaceWrapper) GetV1Health(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Health(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostV1KeysNew operation middleware
func (siw *ServerInterfaceWrapper) PostV1KeysNew(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1KeysNewParams

	// ------------- Optional query parameter "chain" -------------

	err = runtime.BindQueryParameter("form", true, false, "chain", r.URL.Query(), &params.Chain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chain", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1KeysNew(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostV1TxBroadcast operation middleware
func (siw *ServerInterfaceWrapper) PostV1TxBroadcast(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1TxBroadcastParams

	// ------------- Optional query parameter "chain" -------------

	err = runtime.BindQueryParameter("form", true, false, "chain", r.URL.Query(), &params.Chain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chain", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1TxBroadcast(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostV1TxBuild operation middleware
func (siw *ServerInterfaceWrapper) PostV1TxBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1TxBuildParams

	// ------------- Optional query parameter "chain" -------------

	err = runtime.BindQueryParameter("form", true, false, "chain", r.URL.Query(), &params.Chain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chain", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1TxBuild(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostV1TxSign operation middleware
func (siw *ServerInterfaceWrapper) PostV1TxSign(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1TxSignParams

	// ------------- Optional query parameter "chain" -------------

	err = runtime.BindQueryParameter("form", true, false, "chain", r.URL.Query(), &params.Chain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chain", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1TxSign(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV1TxId operation middleware
func (siw *ServerInterfaceWrapper) GetV1TxId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1TxIdParams

	// ------------- Optional query parameter "chain" -------------

	err = runtime.BindQueryParameter("form", true, false, "chain", r.URL.Query(), &params.Chain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chain", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1TxId(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/balance/{address}", wrapper.GetV1BalanceAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/chains", wrapper.GetV1Chains)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health", wrapper.GetV1Health)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/keys/new", wrapper.PostV1KeysNew)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tx/broadcast", wrapper.PostV1TxBroadcast)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tx/build", wrapper.PostV1TxBuild)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tx/sign", wrapper.PostV1TxSign)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tx/{id}", wrapper.GetV1TxId)
	})

	return r
}

type GetV1BalanceAddressRequestObject struct {
	Address string `json:"address"`
	Params  GetV1BalanceAddressParams
}

type GetV1BalanceAddressResponseObject interface {
	VisitGetV1BalanceAddressResponse(w http.ResponseWriter) error
}

type GetV1BalanceAddress200JSONResponse BalanceResponse

func (response GetV1BalanceAddress200JSONResponse) VisitGetV1BalanceAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1BalanceAddress400JSONResponse ErrorResponse

func (response GetV1BalanceAddress400JSONResponse) VisitGetV1BalanceAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV1ChainsRequestObject struct {
}

type GetV1ChainsResponseObject interface {
	VisitGetV1ChainsResponse(w http.ResponseWriter) error
}

type GetV1Chains200JSONResponse ChainsResponse

func (response GetV1Chains200JSONResponse) VisitGetV1ChainsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1HealthRequestObject struct {
}

type GetV1HealthResponseObject interface {
	VisitGetV1HealthResponse(w http.ResponseWriter) error
}

type GetV1Health200JSONResponse struct {
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`
}

func (response GetV1Health200JSONResponse) VisitGetV1HealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1KeysNewRequestObject struct {
	Params PostV1KeysNewParams
	Body   *PostV1KeysNewJSONRequestBody
}

type PostV1KeysNewResponseObject interface {
	VisitPostV1KeysNewResponse(w http.ResponseWriter) error
}

type PostV1KeysNew200JSONResponse KeyResponse

func (response PostV1KeysNew200JSONResponse) VisitPostV1KeysNewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1KeysNew400JSONResponse ErrorResponse

func (response PostV1KeysNew400JSONResponse) VisitPostV1KeysNewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostV1TxBroadcastRequestObject struct {
	Params PostV1TxBroadcastParams
	Body   *PostV1TxBroadcastJSONRequestBody
}

type PostV1TxBroadcastResponseObject interface {
	VisitPostV1TxBroadcastResponse(w http.ResponseWriter) error
}

type PostV1TxBroadcast200JSONResponse BroadcastResponse

func (response PostV1TxBroadcast200JSONResponse) VisitPostV1TxBroadcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1TxBroadcast400JSONResponse ErrorResponse

func (response PostV1TxBroadcast400JSONResponse) VisitPostV1TxBroadcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostV1TxBuildRequestObject struct {
	Params PostV1TxBuildParams
	Body   *PostV1TxBuildJSONRequestBody
}

type PostV1TxBuildResponseObject interface {
	VisitPostV1TxBuildResponse(w http.ResponseWriter) error
}

type PostV1TxBuild200JSONResponse Tx

func (response PostV1TxBuild200JSONResponse) VisitPostV1TxBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1TxBuild400JSONResponse ErrorResponse

func (response PostV1TxBuild400JSONResponse) VisitPostV1TxBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostV1TxSignRequestObject struct {
	Params PostV1TxSignParams
	Body   *PostV1TxSignJSONRequestBody
}

type PostV1TxSignResponseObject interface {
	VisitPostV1TxSignResponse(w http.ResponseWriter) error
}

type PostV1TxSign200JSONResponse SignedTx

func (response PostV1TxSign200JSONResponse) VisitPostV1TxSignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1TxSign400JSONResponse ErrorResponse

func (response PostV1TxSign400JSONResponse) VisitPostV1TxSignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV1TxIdRequestObject struct {
	Id     string `json:"id"`
	Params GetV1TxIdParams
}

type GetV1TxIdResponseObject interface {
	VisitGetV1TxIdResponse(w http.ResponseWriter) error
}

type GetV1TxId200JSONResponse StatusResponse

func (response GetV1TxId200JSONResponse) VisitGetV1TxIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1TxId400JSONResponse ErrorResponse

func (response GetV1TxId400JSONResponse) VisitGetV1TxIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /v1/balance/{address})
	GetV1BalanceAddress(ctx context.Context, request GetV1BalanceAddressRequestObject) (GetV1BalanceAddressResponseObject, error)

	// (GET /v1/chains)
	GetV1Chains(ctx context.Context, request GetV1ChainsRequestObject) (GetV1ChainsResponseObject, error)

	// (GET /v1/health)
	GetV1Health(ctx context.Context, request GetV1HealthRequestObject) (GetV1HealthResponseObject, error)

	// (POST /v1/keys/new)
	PostV1KeysNew(ctx context.Context, request PostV1KeysNewRequestObject) (PostV1KeysNewResponseObject, error)

	// (POST /v1/tx/broadcast)
	PostV1TxBroadcast(ctx context.Context, request PostV1TxBroadcastRequestObject) (PostV1TxBroadcastResponseObject, error)

	// (POST /v1/tx/build)
	PostV1TxBuild(ctx context.Context, request PostV1TxBuildRequestObject) (PostV1TxBuildResponseObject, error)

	// (POST /v1/tx/sign)
	PostV1TxSign(ctx context.Context, request PostV1TxSignRequestObject) (PostV1TxSignResponseObject, error)

	// (GET /v1/tx/{id})
	GetV1TxId(ctx context.Context, request GetV1TxIdRequestObject) (GetV1TxIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetV1BalanceAddress operation middleware
func (sh *strictHandler) GetV1BalanceAddress(w http.ResponseWriter, r *http.Request, address string, params GetV1BalanceAddressParams) {
	var request GetV1BalanceAddressRequestObject

	request.Address = address
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1BalanceAddress(ctx, request.(GetV1BalanceAddressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1BalanceAddress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1BalanceAddressResponseObject); ok {
		if err := validResponse.VisitGetV1BalanceAddressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1Chains operation middleware
func (sh *strictHandler) GetV1Chains(w http.ResponseWriter, r *http.Request) {
	var request GetV1ChainsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1Chains(ctx, request.(GetV1ChainsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1Chains")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1ChainsResponseObject); ok {
		if err := validResponse.VisitGetV1ChainsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1Health operation middleware
func (sh *strictHandler) GetV1Health(w http.ResponseWriter, r *http.Request) {
	var request GetV1HealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1Health(ctx, request.(GetV1HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1Health")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1HealthResponseObject); ok {
		if err := validResponse.VisitGetV1HealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1KeysNew operation middleware
func (sh *strictHandler) PostV1KeysNew(w http.ResponseWriter, r *http.Request, params PostV1KeysNewParams) {
	var request PostV1KeysNewRequestObject

	request.Params = params

	var body PostV1KeysNewJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1KeysNew(ctx, request.(PostV1KeysNewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1KeysNew")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1KeysNewResponseObject); ok {
		if err := validResponse.VisitPostV1KeysNewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1TxBroadcast operation middleware
func (sh *strictHandler) PostV1TxBroadcast(w http.ResponseWriter, r *http.Request, params PostV1TxBroadcastParams) {
	var request PostV1TxBroadcastRequestObject

	request.Params = params

	var body PostV1TxBroadcastJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1TxBroadcast(ctx, request.(PostV1TxBroadcastRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1TxBroadcast")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1TxBroadcastResponseObject); ok {
		if err := validResponse.VisitPostV1TxBroadcastResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1TxBuild operation middleware
func (sh *strictHandler) PostV1TxBuild(w http.ResponseWriter, r *http.Request, params PostV1TxBuildParams) {
	var request PostV1TxBuildRequestObject

	request.Params = params

	var body PostV1TxBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1TxBuild(ctx, request.(PostV1TxBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1TxBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1TxBuildResponseObject); ok {
		if err := validResponse.VisitPostV1TxBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1TxSign operation middleware
func (sh *strictHandler) PostV1TxSign(w http.ResponseWriter, r *http.Request, params PostV1TxSignParams) {
	var request PostV1TxSignRequestObject

	request.Params = params

	var body PostV1TxSignJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1TxSign(ctx, request.(PostV1TxSignRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1TxSign")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1TxSignResponseObject); ok {
		if err := validResponse.VisitPostV1TxSignResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1TxId operation middleware
func (sh *strictHandler) GetV1TxId(w http.ResponseWriter, r *http.Request, id string, params GetV1TxIdParams) {
	var request GetV1TxIdRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1TxId(ctx, request.(GetV1TxIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1TxId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1TxIdResponseObject); ok {
		if err := validResponse.VisitGetV1TxIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY32/bNhD+V4TbHlX/6IotULGHplvaIsAWpF5fgjzQ4tlmK5EKeUpkGP7fh6NkR7Yo",
	"O1uWNeue4oqnu4/fffeJ7ApSkxdGoyYHyQpcusBc+J+nIhM6xUt0hdEO+VFhTYGWFPqAaR3AP2fG5oIg",
	"gVJp+vEVxJArrfIyh2QUAy0LhASUJpyjhfU6Bos3pbIoIbna5rneRprpZ0wJ1jGcWiNkKhz1w6Dqg/R/",
	"63cdWaXnnSI+KlihVJmcVJd4U6KjbnqRm1LTkU2Ou5uMYYYBtLmozhAv0L6rWf5rzMX8/oVVxipanuHj",
	"ud+BE6JnZk0eYDcGMsdJ9y/70HjDY01LqNLbhVDatfusCHMXLl4/ENaKJf/7V2uN7ZcI8vJxuHVYCNs5",
	"LvuzCyktujDQwqpbQXiOy/ByOc1UGl7dA9fK1H4v3pYP4f6o5vqAto+go4off29xBgl8N7x3imFjE8NJ",
	"dRgnVb2wUE6qLiIr7t5j1YPmIXPeJIj7B/4jCSpdfzudX/ey0TxEV1CgllzLTxa2s/aAaFKEqoc2fchi",
	"ug4gBQmO1WWWiWmGkJAtMe4SNuvzh4BV9U25Nr0O383yNy2hSxO/pPSsTqeI9whzk7JBRG8uPkAMt2id",
	"MhoSGA9GgxFXNwVqUShI4IfBaMAIC0ELT/DwdjxsvjLDVTMva16Yo6edmyFIGc0Kg3dIn8bN1+9NM1yc",
	"zIocCa2D5GoFimtzAYhBi9y70Tb2fsN1a+pxCZLTZLop0S7vU/mtQvvFjRYbGiAGpAVaLJnNqaLUKB0S",
	"5jWjqaXuqXg5GvGf1GjCWnOiKDKV+u0PPzvmdNWqe2j6908Ivm8SXWpVQXV3mhDuz6t/sPKu3wfrysg2",
	"trf266wBT5073Pj6MwRPSNvehy6A/vfzFugFiowWh0G/r2MeCbrPB7tWrHJ0JPJixxmkIHzBS/BAf2wn",
	"CpvAAVq+4NINNd554MYFmLkwjj6Nz3HpfsO7ngl+2rnz+js1cvmINuRGegOWOBNlxjxboaU30Q227QPJ",
	"u+PTnyOVBlAxB84VCytck7NN7y/ttyOli5JeR6VDGRmdLSM1ixjLzztFIqFl5BBlpFwkpg41DSBQl0O6",
	"FS/FXfTH5OzFSURY0etoIdwCOZ+9RfvCKYmDoJY6Slk/4bi2z34BUb61KAhl9AWXhVD2mTgdVcPp5up0",
	"bEIm1faW9R+akkOkbc+X613n4a/xU0qle1sNNWwTFFl0PNHPRzF8FX6AWnzYt6GUvdv/v6yXjUL3+lOq",
	"jCKyQjuR+mfPRiFOzfVxgfD4fUNO8tXksWtjuy2q156nSlZKHrldTfhy/pA7lZL/n+vU3n9MBBifVFFz",
	"dP7avfZHOj6l1Z0rbQYJLIiKZDgcv/yJ7+SDcXIyOhnB+nr9ZwAAAP//i7k+1mYWAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
